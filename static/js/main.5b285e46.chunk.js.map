{"version":3,"sources":["components/Contact.js","components/Nav.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Contact","className","action","method","type","placeholder","size","required","name","rows","cols","Nav","class","data-toggle","data-target","id","to","TodoList","useState","newInput","setNewInput","todoItems","setTodoItems","error","setError","editDisable","setEditDisable","deleteTodo","e","preventDefault","filter","todoItem","generateTodo","map","key","text","disabled","onClick","todoObject","find","editTodo","onSubmit","uuidv4","target","reset","value","onChange","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5b285e46.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Contact() {\n  return (\n    <div className=\"contact-container\">\n        <h1>Contact</h1>\n        <form className=\"contact-form\" action=\"https://formspree.io/xlepdryq\" method=\"POST\">\n            <div className=\"contact-input-container\">\n              <input className=\"contact-item\" type=\"text\" placeholder=\"First Name\" size=\"60\" required />\n              <input className=\"contact-item\"type=\"text\" placeholder=\"Last Name\" size=\"60\" required />\n              <input className=\"contact-item\" type=\"email\" name=\"_replyto\" placeholder=\"Email\" size=\"60\" required />\n            </div>\n            <div className=\"textbox-container\">\n              <textarea placeholder=\"Enter your message here\" rows=\"6\" cols=\"60\" required></textarea>\n              <button className=\"btn btn-success contact-submit-btn btn-lg\"type=\"submit\">Send</button>\n            </div>\n            \n        </form>\n    </div>\n  );\n}\n\nexport default Contact;\n","import React from 'react';\nimport '../App.css';\nimport {Link} from 'react-router-dom';\n\nfunction Nav() {\n  return (\n      <nav className=\"navbar navbar-expand-sm navbar-light\">\n          <h2 class=\"doable-header\">DoAble - Todo App</h2>\n          <ul className=\"nav-links navbar-nav navbar-brand\">\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#link_targets\">\n            <span className=\"navbar-toggler-icon\"></span>\n            </button>\n              <div className=\"collapse navbar-collapse\" id=\"link_targets\">\n                <Link to='/'>\n                    <li className=\"nav-item\">\n                        Todos\n                    </li>\n                </Link>\n                <Link to='/contact'>\n                    <li className=\"nav-item\">\n                        Contact\n                    </li>\n                </Link>\n              </div>\n          </ul>\n      </nav>\n  );\n}\n\nexport default Nav;\n","import React, {useState} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction TodoList(){\n  const [newInput, setNewInput] = useState('')\n  const [todoItems, setTodoItems] = useState([])\n  const [error, setError] = useState('');\n  const [editDisable, setEditDisable] = useState(false);\n\n  const handleInputChange = (e) => {\n    e.preventDefault();\n    setNewInput(e.target.value)\n  }\n\n  const handleTodoItems = (e) => {\n    if (editDisable) {\n      setEditDisable(false)\n    }\n    e.preventDefault();\n    if (newInput===\"\") {\n      setError(\"Input field cannot be empty\");\n    } else if ( (typeof todoItems.find( ({text}) => text === newInput)) !== 'undefined'  ) {\n      setError('Todo List item cannot be duplicate')\n    } else {\n      setTodoItems([...todoItems, {id: uuidv4(), text: newInput}]);\n      setError('')\n      e.target.reset();\n      setNewInput(\"\");\n      }\n  }\n\n  const deleteTodo = (id, e) => {\n    e.preventDefault()\n    setTodoItems(todoItems.filter((todoItem) => todoItem.id !== id))\n  }\n  \n  const editTodo = (id, e) => { \n    if(!editDisable){\n      e.preventDefault()\n      const todoObject = todoItems.find((todoItem) => todoItem.id === id)\n      deleteTodo(id, e)\n      setNewInput(todoObject.text)\n      setEditDisable(true)\n    }\n  }\n\n\n  const generateTodo = todoItems.map((todoItem) => (\n    <li className=\"todo col-md-6 offset-md-3\" key={todoItem.id} >\n      {todoItem.text}\n    <div>\n      <button disabled={editDisable} id=\"edit-btn\"className=\"btn btn-info\" onClick={(e) => editTodo(todoItem.id, e)}>Edit</button>\n      <button className=\"btn btn-danger\" onClick={(e) => deleteTodo(todoItem.id, e)}>Delete</button>\n    </div>\n    </li>\n    ));\n  \n  return (\n      <div className=\"App text-center\">\n        <h1>Manage Your Todo List</h1>\n        <form className=\"todo-list text-center\" onSubmit={handleTodoItems}>\n          <input size=\"30\"className=\"todo-form\" placeholder=\"Enter your todo here\" value={newInput} onChange={handleInputChange} />\n          <button className=\"todo-form btn btn-success\" type=\"submit\">Add</button>\n          <div className=\"error-message\">{error}</div>\n          <ul className=\"remove-default-padding\">\n            {generateTodo}\n          </ul>\n        </form>\n      </div>\n  )\n}\n\nexport default TodoList","import React from 'react';\nimport './App.css';\nimport Contact from './components/Contact';\nimport Nav from './components/Nav';\nimport TodoList from './components/TodoList';\nimport { BrowserRouter as HashRouter, Switch, Route } from 'react-router-dom';\n\nfunction App(){\n  \n  return (\n      <div className=\"App\">\n        <HashRouter>\n          <Nav />\n          <Switch>\n            <Route path=\"/\" exact component={TodoList} />\n            <Route path=\"/contact\" component={Contact} />\n          </Switch>\n          <footer className=\"sticky-bottom\">\n            Copyright Mateo Navarrette 2020\n          </footer>\n        </HashRouter>\n      </div>\n  )\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}